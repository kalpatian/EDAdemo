-- Copyright (C) 1991-2005 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.
--cnt[0] is cnt[0]
cnt[0] = DFFEAS(A1L14, clk100khz,  ,  ,  ,  ,  ,  ,  );


--cnt[2] is cnt[2]
cnt[2] = DFFEAS(A1L17, clk100khz,  ,  ,  ,  ,  ,  ,  );


--cnt[1] is cnt[1]
cnt[1] = DFFEAS(A1L18, clk100khz,  ,  ,  ,  ,  ,  ,  );


--A1L1 is Decoder~123
A1L1 = !cnt[0] & !cnt[2] & !cnt[1];


--A1L2 is Decoder~124
A1L2 = cnt[0] & !cnt[2] & !cnt[1];


--A1L73 is reduce_or~127
A1L73 = dat[2] & !dat[1] & (dat[0] $ !dat[3]) # !dat[2] & dat[0] & (dat[1] $ !dat[3]);


--A1L74 is reduce_or~128
A1L74 = dat[1] & (dat[0] & (dat[3]) # !dat[0] & dat[2]) # !dat[1] & dat[2] & (dat[0] $ dat[3]);


--A1L75 is reduce_or~129
A1L75 = dat[2] & dat[3] & (dat[1] # !dat[0]) # !dat[2] & !dat[0] & dat[1] & !dat[3];


--A1L76 is reduce_or~130
A1L76 = dat[1] & (dat[0] & dat[2] # !dat[0] & !dat[2] & dat[3]) # !dat[1] & !dat[3] & (dat[0] $ dat[2]);


--A1L77 is reduce_or~131
A1L77 = dat[1] & dat[0] & (!dat[3]) # !dat[1] & (dat[2] & (!dat[3]) # !dat[2] & dat[0]);


--A1L78 is reduce_or~132
A1L78 = dat[0] & (dat[3] $ (dat[1] # !dat[2])) # !dat[0] & dat[1] & !dat[2] & !dat[3];


--A1L79 is reduce_or~133
A1L79 = dat[0] & (dat[3] # dat[1] $ dat[2]) # !dat[0] & (dat[1] # dat[2] $ dat[3]);


--A1L17 is cnt[2]~58
A1L17 = cnt[2] $ (cnt[0] & cnt[1]);


--A1L18 is cnt~59
A1L18 = cnt[1] & (!cnt[0]) # !cnt[1] & cnt[2] & cnt[0];


--data2[0] is data2[0]
data2[0] = DFFEAS(A1L44, f2,  ,  ,  , A1L57,  ,  , A1L54);


--data1[0] is data1[0]
data1[0] = DFFEAS(A1L27, A1L69,  ,  ,  , A1L57,  ,  , A1L38);


--A1L4 is Select~200
A1L4 = cnt[0] & data2[0] # !cnt[0] & (data1[0]);


--A1L3 is Decoder~125
A1L3 = !cnt[2] & !cnt[1];


--data2[1] is data2[1]
data2[1] = DFFEAS(A1L47, f2,  ,  ,  , A1L57,  ,  , A1L54);


--data1[1] is data1[1]
data1[1] = DFFEAS(A1L30, A1L69,  ,  ,  , A1L57,  ,  , A1L38);


--A1L5 is Select~201
A1L5 = cnt[0] & data2[1] # !cnt[0] & (data1[1]);


--data2[2] is data2[2]
data2[2] = DFFEAS(A1L50, f2,  ,  ,  , A1L57,  ,  , A1L54);


--data1[2] is data1[2]
data1[2] = DFFEAS(A1L33, A1L69,  ,  ,  , A1L57,  ,  , A1L38);


--A1L6 is Select~202
A1L6 = cnt[0] & data2[2] # !cnt[0] & (data1[2]);


--data2[3] is data2[3]
data2[3] = DFFEAS(A1L55, f2,  ,  ,  , A1L57,  ,  , A1L54);


--data1[3] is data1[3]
data1[3] = DFFEAS(A1L39, A1L69,  ,  ,  , A1L57,  ,  , A1L38);


--A1L7 is Select~203
A1L7 = cnt[0] & data2[3] # !cnt[0] & (data1[3]);


--f2 is f2
f2 = DFFEAS(A1L71, A1L69,  ,  ,  ,  ,  ,  ,  );


--A1L44 is data2[0]~459
A1L44 = data2[0] $ VCC;

--A1L45 is data2[0]~460
A1L45 = CARRY(data2[0]);


--A1L57 is data2~461
A1L57 = !flag & rst;


--A1L53 is data2[3]~462
A1L53 = data2[0] & data2[2] & data2[3] & flag # !data2[0] & (data2[2] # data2[3] # flag);


--A1L54 is data2[3]~463
A1L54 = data2[1] & data2[0] & A1L53 # !data2[1] & !data2[0] & !A1L53 # !rst;


--c is c
c = DFFEAS(A1L19, clk10hz,  ,  ,  ,  ,  ,  ,  );


--A1L69 is f1~10
A1L69 = en & c # !en & (clk1hz);


--A1L27 is data1[0]~375
A1L27 = data1[0] $ VCC;

--A1L28 is data1[0]~376
A1L28 = CARRY(data1[0]);


--A1L36 is data1[3]~377
A1L36 = !data1[3] # !data1[2] # !data1[1] # !data1[0];


--A1L37 is data1[3]~378
A1L37 = data1[0] # data1[1] # data1[2] # data1[3];


--A1L38 is data1[3]~379
A1L38 = flag & !A1L36 # !flag & (!A1L37) # !rst;


--A1L47 is data2[1]~464
A1L47 = flag & (data2[1] & !A1L45 # !data2[1] & (A1L45 # GND)) # !flag & (data2[1] & A1L45 & VCC # !data2[1] & !A1L45);

--A1L48 is data2[1]~465
A1L48 = CARRY(flag & (!A1L45 # !data2[1]) # !flag & !data2[1] & !A1L45);


--A1L30 is data1[1]~380
A1L30 = flag & (data1[1] & !A1L28 # !data1[1] & (A1L28 # GND)) # !flag & (data1[1] & A1L28 & VCC # !data1[1] & !A1L28);

--A1L31 is data1[1]~381
A1L31 = CARRY(flag & (!A1L28 # !data1[1]) # !flag & !data1[1] & !A1L28);


--A1L50 is data2[2]~466
A1L50 = (flag $ data2[2] $ A1L48) # GND;

--A1L51 is data2[2]~467
A1L51 = CARRY(flag & data2[2] & !A1L48 # !flag & (data2[2] # !A1L48));


--A1L33 is data1[2]~382
A1L33 = (flag $ data1[2] $ A1L31) # GND;

--A1L34 is data1[2]~383
A1L34 = CARRY(flag & data1[2] & !A1L31 # !flag & (data1[2] # !A1L31));


--A1L55 is data2[3]~468
A1L55 = flag $ data2[3] $ !A1L51;


--A1L39 is data1[3]~384
A1L39 = flag $ data1[3] $ !A1L34;


--A1L41 is data1[3]~386
A1L41 = flag & A1L36 # !flag & (A1L37);


--A1L71 is f2~50
A1L71 = rst & (!A1L41) # !rst & f2;


--A1L14 is cnt[0]~60
A1L14 = !cnt[0];


--A1L19 is c~2
A1L19 = !din;


--dat[0] is dat[0]
dat[0] = A1L3 & A1L4 # !A1L3 & (dat[0]);


--dat[1] is dat[1]
dat[1] = A1L3 & A1L5 # !A1L3 & (dat[1]);


--dat[2] is dat[2]
dat[2] = A1L3 & A1L6 # !A1L3 & (dat[2]);


--dat[3] is dat[3]
dat[3] = A1L3 & A1L7 # !A1L3 & (dat[3]);


--clk100khz is clk100khz
--operation mode is input

clk100khz = INPUT();


--flag is flag
--operation mode is input

flag = INPUT();


--rst is rst
--operation mode is input

rst = INPUT();


--clk1hz is clk1hz
--operation mode is input

clk1hz = INPUT();


--en is en
--operation mode is input

en = INPUT();


--din is din
--operation mode is input

din = INPUT();


--clk10hz is clk10hz
--operation mode is input

clk10hz = INPUT();


--scan[0] is scan[0]
--operation mode is output

scan[0] = OUTPUT(GND);


--scan[1] is scan[1]
--operation mode is output

scan[1] = OUTPUT(GND);


--scan[2] is scan[2]
--operation mode is output

scan[2] = OUTPUT(GND);


--scan[3] is scan[3]
--operation mode is output

scan[3] = OUTPUT(A1L1);


--scan[4] is scan[4]
--operation mode is output

scan[4] = OUTPUT(A1L2);


--scan[5] is scan[5]
--operation mode is output

scan[5] = OUTPUT(GND);


--dout[0] is dout[0]
--operation mode is output

dout[0] = OUTPUT(!A1L73);


--dout[1] is dout[1]
--operation mode is output

dout[1] = OUTPUT(!A1L74);


--dout[2] is dout[2]
--operation mode is output

dout[2] = OUTPUT(!A1L75);


--dout[3] is dout[3]
--operation mode is output

dout[3] = OUTPUT(!A1L76);


--dout[4] is dout[4]
--operation mode is output

dout[4] = OUTPUT(!A1L77);


--dout[5] is dout[5]
--operation mode is output

dout[5] = OUTPUT(!A1L78);


--dout[6] is dout[6]
--operation mode is output

dout[6] = OUTPUT(A1L79);


--dout[7] is dout[7]
--operation mode is output

dout[7] = OUTPUT(GND);


